{"version":3,"file":"static/js/746.c2a845db.chunk.js","mappings":"wRAEaA,EAAiBC,EAAAA,OAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,4PAY1BC,EAAkBH,EAAAA,OAAAA,IAAUI,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,8GAO5BG,EAAiBL,EAAAA,OAAAA,GAASM,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,kDAI1BK,EAAmBP,EAAAA,OAAAA,IAAUQ,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,0B,SC+C1C,EA3Da,WACX,IAAAO,GAAgCC,EAAAA,EAAAA,UAAS,CAAC,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArCI,EAAQF,EAAA,GAAEG,EAAWH,EAAA,GAC5BI,GAA0BL,EAAAA,EAAAA,UAAS,MAAKM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAjCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GACtBG,GAAkCT,EAAAA,EAAAA,WAAS,GAAMU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GACtBG,GAAWC,EAAAA,EAAAA,MAAXD,QACRE,EAAAA,EAAAA,YAAU,WACR,GAAKF,EAAL,CAEA,IAAMG,EAAa,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEC,OAFDF,EAAAC,KAAA,EAElBX,GAAa,GAAMU,EAAAE,KAAA,GACQC,EAAAA,EAAAA,IAAcZ,GAAQ,KAAD,EAA1CQ,EAAYC,EAAAI,KAClBC,QAAQC,IAAIP,GACZjB,EAAYiB,GAAcC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAO,GAAAP,EAAA,SAE1Bd,EAAQc,EAAAO,IAAQ,QAEI,OAFJP,EAAAC,KAAA,GAEhBX,GAAa,GAAOU,EAAAQ,OAAA,6BAAAR,EAAAS,OAAA,GAAAX,EAAA,wBAEvB,kBAXkB,OAAAH,EAAAe,MAAA,KAAAC,UAAA,KAYnBjB,GAdmB,CAerB,GAAG,CAACH,IACJ,IAAQqB,EAAS/B,EAAT+B,KACR,OACEC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACa,OAAV7B,IACC4B,EAAAA,EAAAA,MAAA,KAAGE,UAAU,UAASD,SAAA,CAAC,6DACsC7B,KAG9DI,IAAa2B,EAAAA,EAAAA,KAACC,EAAAA,EAAM,IACP,OAAbpC,IACCmC,EAAAA,EAAAA,KAACjD,EAAc,CAAA+C,SACZF,GACCA,EAAKM,KAAI,SAAAC,GAAA,IAAGC,EAAED,EAAFC,GAAIC,EAAIF,EAAJE,KAAMC,EAASH,EAATG,UAAWC,EAAYJ,EAAZI,aAAY,OAC3CV,EAAAA,EAAAA,MAACxC,EAAc,CAAAyC,SAAA,EACbE,EAAAA,EAAAA,KAAA,OAAAF,UACEE,EAAAA,EAAAA,KAACzC,EAAgB,CACfiD,IACED,EAAY,kCAAAE,OACsBF,G,qoHAEpCG,IAAKL,EACLM,MAAM,aAGVd,EAAAA,EAAAA,MAAC1C,EAAe,CAAA2C,SAAA,EACdE,EAAAA,EAAAA,KAAA,MAAAF,SAAKO,KACLR,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,cAAYQ,UAbEF,EAeJ,QAM/B,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import { styled } from 'styled-components';\n\nexport const StyledCastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 40px;\n  justify-content: space-between;\n  list-style: none;\n  text-align: center;\n  padding: 60px;\n  box-shadow: 0 0 10px rgb(14, 82, 91);\n  margin: 0;\n  background-color: rgb(29, 29, 39);\n`;\nexport const StyledActorName = styled.div`\n  display: block;\n  background-color: rgba(14, 82, 91, 0.1);\n  margin: 0;\n  padding: 20px 10px;\n`;\n\nexport const StyledCastItem = styled.li`\n  flex-basis: calc((100% - 24px) / 6);\n`;\n\nexport const StyledActorPhoto = styled.img`\n  width: 100%;\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchFilmCast } from 'services/fetch';\nimport { Loader } from '../Loader/Loader';\nimport {\n  StyledActorName,\n  StyledActorPhoto,\n  StyledCastItem,\n  StyledCastList,\n} from './Cast.styled';\n\nimport default_poster from '../../img/default_poster.png'\n\nconst Cast = () => {\n  const [filmCast, setFilmCast] = useState({});\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { filmId } = useParams();\n  useEffect(() => {\n    if (!filmId) return;\n\n    const fetchCastData = async () => {\n      try {\n        setIsLoading(true);\n        const filmCastData = await fetchFilmCast(filmId);\n        console.log(filmCastData);\n        setFilmCast(filmCastData);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchCastData();\n  }, [filmId]);\n  const { cast } = filmCast;\n  return (\n    <div>\n      {error !== null && (\n        <p className=\"c-error\">\n          Oops, some error occured. Please, try again later. Error: {error}\n        </p>\n      )}\n      {isLoading && <Loader />}\n      {filmCast !== null && (\n        <StyledCastList>\n          {cast &&\n            cast.map(({ id, name, character, profile_path }) => (\n              <StyledCastItem key={id}>\n                <div>\n                  <StyledActorPhoto\n                    src={\n                      profile_path ?\n                      `https://image.tmdb.org/t/p/w500${profile_path}`\n                      : default_poster}\n                    alt={name}\n                    width=\"180px\"\n                  />\n                </div>\n                <StyledActorName>\n                  <h5>{name}</h5>\n                  <p>Character: {character}</p>\n                </StyledActorName>\n              </StyledCastItem>\n            ))}\n        </StyledCastList>\n      )}\n    </div>\n  );\n};\n\n\nexport default Cast;\n"],"names":["StyledCastList","styled","_templateObject","_taggedTemplateLiteral","StyledActorName","_templateObject2","StyledCastItem","_templateObject3","StyledActorPhoto","_templateObject4","_useState","useState","_useState2","_slicedToArray","filmCast","setFilmCast","_useState3","_useState4","error","setError","_useState5","_useState6","isLoading","setIsLoading","filmId","useParams","useEffect","fetchCastData","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","filmCastData","_context","prev","next","fetchFilmCast","sent","console","log","t0","finish","stop","apply","arguments","cast","_jsxs","children","className","_jsx","Loader","map","_ref2","id","name","character","profile_path","src","concat","alt","width"],"sourceRoot":""}